buildscript {
   repositories {
      maven { url "https://plugins.gradle.org/m2/" }
      mavenLocal()
   }
   dependencies {
      classpath "us.ihmc:ihmc-build:0.15.1"
      classpath "com.gradle.publish:plugin-publish-plugin:0.9.9"
   }
}
apply plugin: "us.ihmc.ihmc-build"
apply plugin: "com.gradle.plugin-publish"

ihmc {
   group = "us.ihmc"
   version = "0.20.6"
   vcsUrl = "https://github.com/ihmcrobotics/ihmc-ci"
   openSource = true
   maintainer = "Duncan Calvert"

   configureDependencyResolution()
   if (Eval.me(extraSourceSets).size == 0)
   {
      javaDirectory("main", "../core-api/java")
      javaDirectory("main", "../generator/java")
      resourceDirectory("main", "../generator/resources")
      sourceSetProject("main").sourceSets.test.java.srcDirs = ["src/generator-test/java"]
   }
   else {
      resourceDirectory("generator-test", "builds")
   }
   configurePublications()
}

def junit = "junit:junit:4.12"
def unirestJava = "com.mashape.unirest:unirest-java:1.4.9"
def commonsLang = "org.apache.commons:commons-lang3:3.8"
def commonsIo = "commons-io:commons-io:2.6"
def javaparser = "com.github.javaparser:javaparser-core:3.6.20"
def guava = "com.google.guava:guava:26.0-jre"
def snakeYaml = "org.yaml:snakeyaml:1.23"
def jung2 = "net.sf.jung:jung2:2.0.1"
def ihmcCommons = "us.ihmc:ihmc-commons:0.23.0"
def ihmcCommonsTesting = "us.ihmc:ihmc-commons-testing:0.23.0"
def euclidCore = "us.ihmc:euclid-core:0.6.1"
def jacksonCore = "com.fasterxml.jackson.core:jackson-core:2.9.6"
def jacksonDatabind = "com.fasterxml.jackson.core:jackson-databind:2.9.6"
def jacksonAnnotations = "com.fasterxml.jackson.core:jackson-annotations:2.9.6"
def jgit = "org.eclipse.jgit:org.eclipse.jgit:5.0.3.201809091024-r"
def groovy = "org.codehaus.groovy:groovy:2.3.11"

def pluginMode = Eval.me(extraSourceSets).size == 0
if (pluginMode)
{
   mainDependencies {
      compile dependencies.gradleApi()
      compile junit
      compile unirestJava
      compile commonsLang
      compile javaparser
      compile guava
      compile snakeYaml
      compile jung2
      compile commonsIo
      compile ihmcCommons
      compile euclidCore
      compile jacksonDatabind
      compile jacksonAnnotations
      compile jacksonCore

      testCompile javaparser
      testCompile jgit
      testCompile ihmcCommonsTesting
   }
}
else
{
   mainDependencies {
      compile ihmc.sourceSetProject("core-api")
      compile ihmc.sourceSetProject("generator")
      compile dependencies.gradleApi()
      compile commonsLang
   }

   coreApiDependencies {
      compile junit
   }

   generatorDependencies {
      compile junit
      compile ihmc.sourceSetProject("core-api")
      compile unirestJava
      compile commonsLang
      compile javaparser
      compile guava
      compile snakeYaml
      compile jung2
      compile commonsIo
      compile ihmcCommons
      compile euclidCore
      compile jacksonDatabind
      compile jacksonAnnotations
      compile jacksonCore
      compile groovy
   }

   generatorTestDependencies {
      compile ihmc.sourceSetProject("core-api")
      compile ihmc.sourceSetProject("generator")
      compile javaparser
      compile jgit
      compile ihmcCommonsTesting
   }

   junitfiveTestDependencies {
      implementation "org.junit.jupiter:junit-jupiter-api:5.3.1"
      runtimeOnly "org.junit.jupiter:junit-jupiter-engine:5.3.1"
      compile commonsLang
      compile commonsIo
      compile ihmcCommons
   }
}

if (pluginMode)
{
   pluginBundle {
      website = 'https://github.com/ihmcrobotics/ihmc-ci'
      vcsUrl = 'https://github.com/ihmcrobotics/ihmc-ci'
      description = 'Use this plugin to generate load-balanced and categorized test suites for use with annotations provided in ihmc-ci-core-api.'

      plugins {
         ihmcContinuousIntegrationPlugin {
            id = project.group + '.' + project.name
            displayName = 'IHMC Continuous Integration Plugin'
            tags = ['continuous', 'integration', 'ihmc', 'robotics']
            version = project.version
         }
      }

      mavenCoordinates {
         groupId = project.group
         artifactId = project.name
         version = project.version
      }
   }
}